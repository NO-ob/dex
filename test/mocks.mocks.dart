// Mocks generated by Mockito 5.3.2 from annotations
// in dex_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:collection' as _i2;

import 'package:dex_app/tools/http_client.dart' as _i4;
import 'package:dio/dio.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQueue_0<E> extends _i1.SmartFake implements _i2.Queue<E> {
  _FakeQueue_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_1 extends _i1.SmartFake implements _i3.Dio {
  _FakeDio_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i4.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Queue<_i4.Request> get requests => (super.noSuchMethod(
        Invocation.getter(#requests),
        returnValue: _FakeQueue_0<_i4.Request>(
          this,
          Invocation.getter(#requests),
        ),
      ) as _i2.Queue<_i4.Request>);
  @override
  set requests(_i2.Queue<_i4.Request>? _requests) => super.noSuchMethod(
        Invocation.setter(
          #requests,
          _requests,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_1(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i3.Dio);
  @override
  set dio(_i3.Dio? _dio) => super.noSuchMethod(
        Invocation.setter(
          #dio,
          _dio,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get requestRunning => (super.noSuchMethod(
        Invocation.getter(#requestRunning),
        returnValue: false,
      ) as bool);
  @override
  set requestRunning(bool? _requestRunning) => super.noSuchMethod(
        Invocation.setter(
          #requestRunning,
          _requestRunning,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Duration get timeOut => (super.noSuchMethod(
        Invocation.getter(#timeOut),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#timeOut),
        ),
      ) as Duration);
  @override
  set timeOut(Duration? _timeOut) => super.noSuchMethod(
        Invocation.setter(
          #timeOut,
          _timeOut,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Duration get delay => (super.noSuchMethod(
        Invocation.getter(#delay),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#delay),
        ),
      ) as Duration);
  @override
  set delay(Duration? _delay) => super.noSuchMethod(
        Invocation.setter(
          #delay,
          _delay,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get retryCount => (super.noSuchMethod(
        Invocation.getter(#retryCount),
        returnValue: 0,
      ) as int);
  @override
  set retryCount(int? _retryCount) => super.noSuchMethod(
        Invocation.setter(
          #retryCount,
          _retryCount,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void queueRequest(_i4.Request? request) => super.noSuchMethod(
        Invocation.method(
          #queueRequest,
          [request],
        ),
        returnValueForMissingStub: null,
      );
}
